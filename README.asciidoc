= Kakoune Language Server Protocol Client

Implemented in Rust.

== Installation

`kak-lsp` doesn't manage installation of language servers, please install them by yourself for the languages you plan to use `kak-lsp` with. Please consult  https://github.com/ul/kak-lsp/wiki/How-to-install-servers[How to install servers] wiki page for quick installation of language servers supported by `kak-lsp` out of the box.

=== Pre-built binaries

==== MacOS

----
curl -O -L https://github.com/ul/kak-lsp/releases/download/v2.0.0/kak-lsp.x86_64-apple-darwin.tar.gz
tar xzvf kak-lsp.x86_64-apple-darwin.tar.gz

# replace `~/.local/bin/` with something on your `$PATH`
mv kak-lsp ~/.local/bin/

mv lsp.kak ~/.config/kak/autoload/

mkdir -p ~/.config/kak-lsp 
mv kak-lsp.toml ~/.config/kak-lsp/ 

# service for MacOS to not bother with manual start/restart
mv com.github.ul.kak-lsp.plist ~/Library/LaunchAgents/
launchctl load ~/Library/LaunchAgents/com.github.ul.kak-lsp.plist
----

==== Linux

----
wget https://github.com/ul/kak-lsp/releases/download/v2.0.0/kak-lsp.x86_64-unknown-linux-musl.tar.gz
tar xzvf kak-lsp.x86_64-unknown-linux-musl.tar.gz

# replace `~/.local/bin/` with something on your `$PATH`
mv kak-lsp ~/.local/bin/

mv lsp.kak ~/.config/kak/autoload/

mkdir -p ~/.config/kak-lsp 
mv kak-lsp.toml ~/.config/kak-lsp/ 
----

=== From the source

`kak-lsp` requires nightly Rust because of using `getpid` feature (LSP requires sending client pid in initialize request).

----
git clone https://github.com/ul/kak-lsp
cd kak-lsp

rustup install nightly
rustup run nightly cargo build --release

# replace `~/.local/bin/` with something on your `$PATH`
ln -s $PWD/target/release/kak-lsp ~/.local/bin/
ln -s $PWD/rc ~/.config/kak/autoload/lsp

mkdir -p ~/.config/kak-lsp 
# or just link if you are okay with default config
cp kak-lsp.toml ~/.config/kak-lsp/

# service for MacOS to not bother with manual start/restart
ln -s $PWD/com.github.ul.kak-lsp.plist ~/Library/LaunchAgents/
launchctl load com.github.ul.kak-lsp.plist
----

== Usage

`kak-lsp` is able to connect multiple editor sessions to multiple language servers. Therefore `kak-lsp` process should be started separately and having single one running is enough. Expect it to crash from time to time. Usually it's enough just to restart it. When you return to editing your files `kak-lsp` will restart language server. See Installation for example how to automate keeping `kak-lsp` alive under MacOS.

To enable LSP support for configured languages (see the next section) just add `lsp-enable` command to your `kak`:

----
lsp-enable
----

It will add completions, hover and will bind goto definition to `gd`. Rudimentary support for diagnostics is implemented as well.

== Configuration

kak-lsp is configured via configuration file in https://github.com/toml-lang/toml[TOML] format. By default kak-lsp tries to read `$HOME/.config/kak-lsp/kak-lsp.toml`, but you can override it with command-line option `--config`.

Look into the default `kak-lsp.toml` in the root of repository, it should be quite self-descriptive.

When changing address and port don't forget to update them in `rc/lsp.kak`: `decl str lsp_cmd 'nc localhost 31337'`

